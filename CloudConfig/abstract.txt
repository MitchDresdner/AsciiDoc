When Micro Services start their run, the lifecycle startup process reads properties and uses them to configure process flows and endpoints. In small well contained environments, managing a limited set of properties in files is usually adequate. As your business begins to grow and extend into multiple Cloud Availability Zones, your configuration strategy will need to change. Some of the problems you’ll inevitably encounter in your running environments will necessitate Micro Service property files being extended with a more flexible approach. 

To be more adaptable to application faults and changing conditions, our experience has guided us to solutions like the Spring Cloud Configuration server, which uses a Git repository (by default) to version and serve application properties. Resilience is paramount in Micro Service environments, property values can be changed and committed in Git, and the next Micro Service which starts will derive the latest properties from Git using the Spring Cloud Configuration server, without having to redeploy the application. Spring Cloud Configuration server has support for environment profiles and several ways of securing property data.

We’ve published a reference model on DZone which shows how a MuleSoft Micro Service application would use the Spring Cloud Configuration server at startup to fetch properties and configure endpoints. The next logical step will be to tie in a Discovery service, like Netflix Eureka, to demonstrate how we would dynamically find a Configuration server to connect with and derive our runtime properties. The Discovery process will be shared in a future article.

Link to DZone Article: https://dzone.com/articles/spring-cloud-config-with-the-mule-esb
